---
description: 
globs: 
alwaysApply: true
---
# Technical Specification & Agile Protocol: Douyin Automation Assistant (Web)

## PART 1: SYSTEM ARCHITECTURE & PROJECT STRUCTURE

### 1.1. High-Level Architecture

The system follows a simple three-tier architecture:

1.  **Frontend (Browser)**: A static single-page application (`index.html` with vanilla JavaScript) responsible for user interaction and presenting data.
2.  **Backend (Flask API Server)**: A Python Flask application that exposes a RESTful API to control the automation tasks. It acts as the bridge between the user interface and the core automation logic.
3.  **Automation Service (Selenium)**: The core automation engine, adapted from the original scripts. It runs in a separate thread managed by the Flask backend to avoid blocking API requests.

### 1.2. Project & Repository Structure

The project will adhere to the following directory structure to ensure modularity and separation of concerns.

douyin-web-assistant/
├── app/                      # 核心应用目录
│   ├── api/                  # API蓝图
│   │   └── routes.py         # API路由定义
│   ├── services/             # 业务逻辑
│   │   └── automator.py      # 封装Selenium自动化逻辑
│   ├── static/               # 前端文件 (CSS, JS, Images)
│   │   ├── css/main.css
│   │   ├── js/main.js
│   │   └── index.html
│   └── __init__.py           # Flask应用工厂
├── database.db               # SQLite数据库文件
├── run_db_init.py            # 数据库初始化脚本
├── database.py               # 数据库交互模块
├── requirements.txt          # Python依赖
├── run.py                    # 应用启动脚本

└── README.md                 # 本文档